–ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ Wav2Lip:
‚úÖ 1. –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ (Post-training –∏–ª–∏ Quantization-aware training)
–ü–æ—Å–∫–æ–ª—å–∫—É –º–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞, –Ω–∞—á–Ω–µ–º —Å Post-training quantization:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import torch
from torch.quantization import quantize_dynamic

model = Wav2Lip()
model.load_state_dict(torch.load("..."))  # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞

# –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ –∫ Linear –∏ Conv —Å–ª–æ—è–º
quantized_model = quantize_dynamic(
    model, 
    {torch.nn.Conv2d, torch.nn.Linear}, 
    dtype=torch.qint8
)
‚úÖ 2. –ü—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ (Channel Pruning)
–î–ª—è CNN —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —É–º–µ–Ω—å—à–∏—Ç—å —á–∏—Å–ª–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–∞–Ω–∞–ª–æ–≤) –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, —É–º–µ–Ω—å—à–∏—Ç—å –≤ 2 —Ä–∞–∑–∞:

–ü—Ä–∏–º–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
# –ë—ã–ª–æ:
Conv2d(64, 128, kernel_size=3)

# –°—Ç–∞–ª–æ:
Conv2d(64, 64, kernel_size=3)
–ß—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
def slim_conv(conv_layer, factor=0.5):
    in_c = conv_layer.in_channels
    out_c = int(conv_layer.out_channels * factor)
    new_conv = torch.nn.Conv2d(in_c, out_c, conv_layer.kernel_size,
                               stride=conv_layer.stride,
                               padding=conv_layer.padding)
    return new_conv
‚úÖ 3. –°–ª–∏—è–Ω–∏–µ Conv+BatchNorm (Fusion)
Torch –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç torch.quantization.fuse_modules, –º–æ–∂–Ω–æ —Å–ª–∏—Ç—å Conv2d + BatchNorm + ReLU:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from torch.quantization import fuse_modules

for i, block in enumerate(model.face_encoder_blocks):
    if isinstance(block, torch.nn.Sequential):
        fused_block = fuse_modules(block, [['0.conv_block.0', '0.conv_block.1', '0.act']])
        model.face_encoder_blocks[i] = fused_block
‚úÖ 4. Distillation (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏)
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–µ–Ω—å—à—É—é –≤–µ—Ä—Å–∏—é Wav2Lip, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å teacher (–∏—Å—Ö–æ–¥–Ω—É—é –º–æ–¥–µ–ª—å) –∏ –æ–±—É—á–∞—Ç—å student –ø–æ –ª–æ–≥–∏—Ç–∞–º.

üì¶ –ò—Ç–æ–≥: –±–∞–∑–æ–≤–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–∂–∞—Ç—å –±–µ–∑ –¥–æ–æ–±—É—á–µ–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–∞–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
# 1. –°–ª–∏—è–Ω–∏–µ Conv+BN+ReLU
# 2. –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ (Post-training, qint8 –∏–ª–∏ float16)
# 3. (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∫–∞–Ω–∞–ª–æ–≤ –≤ Conv)
